<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>SpringSecurity OPTIONS请求报401错误</title>
      <link href="/2018/10/16/SpringSecurity-OPTINS/"/>
      <url>/2018/10/16/SpringSecurity-OPTINS/</url>
      <content type="html"><![CDATA[<p>按道理，OPTIONS请求不应该进行权限的拦截判断，但是很奇怪的发现SpringSecurity对它进行拦截，然而由于OPTIONS请求并不会带上token的header，所以就会拦截掉。<br>解决方法就是对于OPTIONS的请求直接放行</p><h2 id="解决方法1"><a href="#解决方法1" class="headerlink" title="解决方法1"></a>解决方法1</h2><p><a href="https://stackoverflow.com/questions/30632200/standalone-spring-oauth2-jwt-authorization-server-cors/30638914#30638914" target="_blank" rel="noopener">Standalone Spring OAuth2 JWT Authorization Server + CORS</a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Order</span>(Ordered.HIGHEST_PRECEDENCE)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleCorsFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SimpleCorsFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest req, ServletResponse res, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        HttpServletResponse response = (HttpServletResponse) res;</span><br><span class="line">        HttpServletRequest request = (HttpServletRequest) req;</span><br><span class="line">        response.setHeader(<span class="string">"Access-Control-Allow-Origin"</span>, <span class="string">"*"</span>);</span><br><span class="line">        response.setHeader(<span class="string">"Access-Control-Allow-Methods"</span>, <span class="string">"POST, GET, OPTIONS, DELETE"</span>);</span><br><span class="line">        response.setHeader(<span class="string">"Access-Control-Max-Age"</span>, <span class="string">"3600"</span>);</span><br><span class="line">        response.setHeader(<span class="string">"Access-Control-Allow-Headers"</span>, <span class="string">"x-requested-with, authorization"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"OPTIONS"</span>.equalsIgnoreCase(request.getMethod())) &#123;</span><br><span class="line">            response.setStatus(HttpServletResponse.SC_OK);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            chain.doFilter(req, res);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="解决方法2"><a href="#解决方法2" class="headerlink" title="解决方法2"></a>解决方法2</h2><p><a href="https://stackoverflow.com/questions/44115004/401-unauthorized-for-options-request-to-oauth-token-in-spring" target="_blank" rel="noopener">401 Unauthorized for Options request to /oauth/token in spring</a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity httpSecurity)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">         httpSecurity.<span class="comment">// your autherization configuration</span></span><br><span class="line">          .antMatchers(HttpMethod.OPTIONS).permitAll()</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringSecurity </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spark groupByKey和reduceByKey</title>
      <link href="/2018/10/13/Spark-groupByKey/"/>
      <url>/2018/10/13/Spark-groupByKey/</url>
      <content type="html"><![CDATA[<p>Spark里面其实有两个不同的groupByKey</p><h2 id="RDD里面的groupByKey"><a href="#RDD里面的groupByKey" class="headerlink" title="RDD里面的groupByKey"></a>RDD里面的groupByKey</h2><p>这个其实是PairRDDFunctions里面的，需要是RDD[(K,V)]才可以调用，这个就是网上很多人说的那个groupByKey。<br>在一个 (K, V) pair 的 dataset 上调用时，返回一个 (K, Iterable<v>) .<br><strong>Note</strong>: 如果分组是为了在每一个 key 上执行聚合操作（例如，sum 或 average)，<strong>此时使用 reduceByKey 或 aggregateByKey 来计算性能会更好</strong>.<br><strong>Note</strong>: 默认情况下，并行度取决于父 RDD 的分区数。可以传递一个可选的 numTasks 参数来设置不同的任务数.<br>groupBykey是把所有的键值对集合都加载到内存中存储计算，所以如果一个键对应的值太多的话，就会导致内存溢出的错误，这是需要重点关注的地方<br><a href="https://blog.csdn.net/do_yourself_go_on/article/details/76033252" target="_blank" rel="noopener">Spark源码之reduceByKey与GroupByKey</a><br><img src="/img/4E9HKoomXxAfnE.png" alt="upload successful"><br><img src="/img/CG828SiJe8pHpb.png" alt="upload successful"></v></p><h2 id="DataSet里面的groupByKey"><a href="#DataSet里面的groupByKey" class="headerlink" title="DataSet里面的groupByKey"></a>DataSet里面的groupByKey</h2><p>dataSet里面的groupByKey其实就是类似于数据库sql的groupBy<br>Returns a [[KeyValueGroupedDataset]] where the data is grouped by the given key `func`.<br>根据key `func` group by 数据<br>dataSet里面没有reduceByKey</p>]]></content>
      
      <categories>
          
          <category> Spark </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>LeetCode 两个数组的交集 II</title>
      <link href="/2018/09/28/LeetCode-%E4%B8%A4%E4%B8%AA%E6%95%B0%E7%BB%84%E7%9A%84%E4%BA%A4%E9%9B%86-II/"/>
      <url>/2018/09/28/LeetCode-%E4%B8%A4%E4%B8%AA%E6%95%B0%E7%BB%84%E7%9A%84%E4%BA%A4%E9%9B%86-II/</url>
      <content type="html"><![CDATA[<p><a href="https://leetcode-cn.com/explore/interview/card/top-interview-questions-easy/1/array/26/" target="_blank" rel="noopener">题目</a></p><ul><li><p>如果给定的数组已经排好序呢？你将如何优化你的算法？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] intersect1(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span>[] nums2) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums1.length &gt; nums2.length) &#123;</span><br><span class="line">            <span class="keyword">return</span> intersect2(nums2, nums1);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (nums1.length == <span class="number">0</span> || nums2.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        Arrays.sort(nums1);</span><br><span class="line">        Arrays.sort(nums2);</span><br><span class="line"></span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; nums1.length &amp;&amp; j &lt; nums2.length; ) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums1[i] == nums2[j]) &#123;</span><br><span class="line">                res.add(nums1[i]);</span><br><span class="line">                i++;</span><br><span class="line">                j++;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums1[i] &lt; nums2[j]) &#123;</span><br><span class="line">                <span class="comment">//如果nums1的小了，那么换一个大一点的跟nums2比较</span></span><br><span class="line">                i++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//如果nums2的小了，那么换一个大一点的跟nums1比较</span></span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res.stream().mapToInt(n -&gt; n).toArray();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>如果 nums2 的元素存储在磁盘上，磁盘内存是有限的，并且你不能一次加载所有的元素到内存中，你该怎么办？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] intersect(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span>[] nums2) &#123;</span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Map&lt;Integer, Integer&gt; numMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> n : nums1) &#123;</span><br><span class="line">            <span class="keyword">if</span> (numMap.containsKey(n)) &#123;</span><br><span class="line">                numMap.put(n, numMap.get(n) + <span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                numMap.put(n, <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//nums2很大，所以，相当于读取的是一个nums2的流</span></span><br><span class="line">        Arrays.stream(nums2).forEach(n -&gt; &#123;</span><br><span class="line">            Integer nV = numMap.get(n);</span><br><span class="line">            <span class="keyword">if</span> (nV != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (nV == <span class="number">0</span>) &#123;</span><br><span class="line">                    numMap.remove(n);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    res.add(n);</span><br><span class="line">                    nV--;</span><br><span class="line">                    numMap.put(n, nV);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> res.stream().mapToInt(n -&gt; n).toArray();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Sklearn CountVectorizer</title>
      <link href="/2018/09/04/Sklearn-CountVectorizer/"/>
      <url>/2018/09/04/Sklearn-CountVectorizer/</url>
      <content type="html"><![CDATA[<p>一直不知道CountVectorizer输出的结果到底是什么意思，现在终于弄明白了<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.feature_extraction.text <span class="keyword">import</span> CountVectorizer</span><br><span class="line"></span><br><span class="line">texts=[<span class="string">"dog cat fish"</span>,<span class="string">"dog cat cat"</span>,<span class="string">"fish bird"</span>, <span class="string">'bird'</span>]</span><br><span class="line">cv = CountVectorizer()</span><br><span class="line">cv_fit=cv.fit_transform(texts)</span><br><span class="line"></span><br><span class="line">print(cv.get_feature_names())</span><br><span class="line">print(cv_fit.toarray())</span><br><span class="line"><span class="comment">#['bird', 'cat', 'dog', 'fish']</span></span><br><span class="line"><span class="comment">#[[0 1 1 1]</span></span><br><span class="line"><span class="comment"># [0 2 1 0]</span></span><br><span class="line"><span class="comment"># [1 0 0 1]</span></span><br><span class="line"><span class="comment"># [1 0 0 0]]</span></span><br><span class="line"></span><br><span class="line">print(cv_fit.toarray().sum(axis=<span class="number">0</span>))</span><br><span class="line"><span class="comment">#[2 3 2 2]</span></span><br></pre></td></tr></table></figure></p><p>[0 1 1 1]意思就是，第一段话”dog cat fish”对应单词表[‘bird’, ‘cat’, ‘dog’, ‘fish’]，bird出现了0次，cat出现了1次，以此类推。由此可以看出，形成的矩阵一般是一个稀疏矩阵，需要进行特征的提取和降维。</p>]]></content>
      
      <categories>
          
          <category> ML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Sklearn </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Sklearn SelectFromModel</title>
      <link href="/2018/09/04/Sklearn-SelectFromModel/"/>
      <url>/2018/09/04/Sklearn-SelectFromModel/</url>
      <content type="html"><![CDATA[<blockquote><p><a href="https://blog.csdn.net/fontthrone/article/details/79064930" target="_blank" rel="noopener">原博客</a></p></blockquote><h2 id="SelectFromModel"><a href="#SelectFromModel" class="headerlink" title="SelectFromModel"></a>SelectFromModel</h2><p>sklearn在Feature selection模块中内置了一个SelectFromModel，该模型可以通过Model本身给出的指标对特征进行选择，其作用与其名字高度一致，select （feature） from model。<br>SelectFromModel 是一个通用转换器,<strong>其需要的Model只需要带有conef_或者feature_importances属性,那么就可以作为SelectFromModel的Model来使用</strong>. 如果相关的<code>coef_</code>或者<code>featureimportances</code>属性值低于预先设置的阈值，这些特征将会被认为不重要并且移除掉。除了指定数值上的阈值之外，还可以通过给定字符串参数来使用内置的启发式方法找到一个合适的阈值。可以使用的启发式方法有 mean、median 以及使用浮点数乘以这些（例如，0.1*mean ）。</p><p><strong>根据基础学习的不同，在estimator中有两种选择方式</strong></p><p>第一种是基于L1的特征选择，使用L1正则化的线性模型会得到稀疏解，当目标是降低维度的时候，可以使用sklearn中的给予L1正则化的线性模型，比如LinearSVC，逻辑回归，或者Lasso。但是要注意的是：在 SVM 和逻辑回归中，参数 C 是用来控制稀疏性的：小的 C 会导致少的特征被选择。使用 Lasso，alpha 的值越大，越少的特征会被选择。</p><p>第二种是给予Tree的特征选择，Tree类的算法包括决策树，随机森林等会在训练后，得出不同特征的重要程度，我们也可以利用这一重要属性对特征进行选择。</p><p>但是无论选择哪一种学习器,我们都要记住的是我们的特征选择的最终标准应当是选择最好的特征,而非必须依照某种方法进行选择</p><p>几个重要的参数，属性，方法</p><ul><li>threshold ： 阈值，string, float, optional default None <ul><li>可以使用：median 或者 mean 或者 1.25 * mean 这种格式。</li><li>如果使用参数惩罚设置为L1，则使用的阈值为1e-5，否则默认使用用mean</li></ul></li><li>prefit ：布尔，默认为False，是否为训练完的模型，（注意不能是cv，GridSearchCV或者clone the estimator得到的），如果是False的话则先fit，再transform。</li><li>threshold_ ：采用的阈值</li></ul><h2 id="简单的示例"><a href="#简单的示例" class="headerlink" title="简单的示例"></a>简单的示例</h2><p>使用L1进行特征选择<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.svm <span class="keyword">import</span> LinearSVC</span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_iris</span><br><span class="line"><span class="keyword">from</span> sklearn.feature_selection <span class="keyword">import</span> SelectFromModel</span><br><span class="line"></span><br><span class="line"><span class="comment"># Load the boston dataset.</span></span><br><span class="line">load_iris = load_iris()</span><br><span class="line">X, y = load_iris[<span class="string">'data'</span>], load_iris[<span class="string">'target'</span>]</span><br><span class="line">print(<span class="string">"X 共有 %s 个特征"</span>%X.shape[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">lsvc = LinearSVC(C=<span class="number">0.01</span>, penalty=<span class="string">"l1"</span>, dual=<span class="keyword">False</span>).fit(X, y)</span><br><span class="line">model = SelectFromModel(lsvc,prefit=<span class="keyword">True</span>)</span><br><span class="line">X_new = model.transform(X)</span><br><span class="line">print(<span class="string">"X_new 共有 %s 个特征"</span>%X_new.shape[<span class="number">1</span>])</span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">X 共有 <span class="number">4</span> 个特征</span><br><span class="line">X_new 共有 <span class="number">3</span> 个特征</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> ML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Sklearn </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Sklearn笔记</title>
      <link href="/2018/08/20/Sklearn%E7%AC%94%E8%AE%B0/"/>
      <url>/2018/08/20/Sklearn%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h3 id="使用sklearn做特征工程"><a href="#使用sklearn做特征工程" class="headerlink" title="使用sklearn做特征工程"></a><a href="https://app.yinxiang.com/shard/s30/nl/5590652/4dfabd73-ecb8-405f-9b7e-fb731df26002?title=%E4%BD%BF%E7%94%A8sklearn%E5%81%9A%E5%8D%95%E6%9C%BA%E7%89%B9%E5%BE%81%E5%B7%A5%E7%A8%8B%20-%20jasonfreak%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD" target="_blank" rel="noopener">使用sklearn做特征工程</a></h3><h3 id="Sklearn-SelectFromModel"><a href="#Sklearn-SelectFromModel" class="headerlink" title="Sklearn SelectFromModel"></a><a href="https://xdkxlk.github.io/2018/09/04/Sklearn-SelectFromModel/">Sklearn SelectFromModel</a></h3><h3 id="Sklearn-CountVectorizer"><a href="#Sklearn-CountVectorizer" class="headerlink" title="Sklearn CountVectorizer"></a><a href="https://xdkxlk.github.io/2018/09/04/Sklearn-CountVectorizer/">Sklearn CountVectorizer</a></h3>]]></content>
      
      <categories>
          
          <category> ML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Sklearn </tag>
            
            <tag> Catalog </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>解决FeignClient默认不传递token的问题</title>
      <link href="/2018/08/11/FeignClient%E9%BB%98%E8%AE%A4%E4%B8%8D%E4%BC%A0%E9%80%92token/"/>
      <url>/2018/08/11/FeignClient%E9%BB%98%E8%AE%A4%E4%B8%8D%E4%BC%A0%E9%80%92token/</url>
      <content type="html"><![CDATA[<p>在使用的过程中，发现如果使用token机制进行用户的验证标识，使用FeignClient不会默认传递Header中Authorization字段的token，需要对于token的传递进行特殊的自定义处理</p><h2 id="最终的实现效果"><a href="#最终的实现效果" class="headerlink" title="最终的实现效果"></a>最终的实现效果</h2><p>使用自定义的<code>@OAuth2FeignClient</code>代替原来的<code>@FeignClient</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@OAuth</span>2FeignClient(name = <span class="string">"servera"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ServerAClient</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line">    <span class="function">HashMap&lt;String, Object&gt; <span class="title">authDemo</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>并在启动类上添加<code>@EnableFeignClients</code>和<code>@EnableOAuth2Client</code>注解</p><h2 id="OAuth2FeignClient"><a href="#OAuth2FeignClient" class="headerlink" title="@OAuth2FeignClient"></a>@OAuth2FeignClient</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@FeignClient</span>(configuration = OAuth2FeignAutoConfiguration.class)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> OAuth2FeignClient &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AliasFor</span>(annotation = FeignClient.class)</span><br><span class="line">    <span class="function">String <span class="title">name</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AliasFor</span>(annotation = FeignClient.class)</span><br><span class="line">    <span class="function">String <span class="title">qualifier</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AliasFor</span>(annotation = FeignClient.class)</span><br><span class="line">    <span class="function">String <span class="title">url</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AliasFor</span>(annotation = FeignClient.class)</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">decode404</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">false</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AliasFor</span>(annotation = FeignClient.class)</span><br><span class="line">    Class&lt;?&gt; fallback() <span class="keyword">default</span> <span class="keyword">void</span>.class;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AliasFor</span>(annotation = FeignClient.class)</span><br><span class="line">    Class&lt;?&gt; fallbackFactory() <span class="keyword">default</span> <span class="keyword">void</span>.class;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AliasFor</span>(annotation = FeignClient.class)</span><br><span class="line">    <span class="function">String <span class="title">path</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AliasFor</span>(annotation = FeignClient.class)</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">primary</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">true</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="OAuth2FeignAutoConfiguration"><a href="#OAuth2FeignAutoConfiguration" class="headerlink" title="OAuth2FeignAutoConfiguration"></a>OAuth2FeignAutoConfiguration</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OAuth2FeignAutoConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RequestInterceptor <span class="title">oauth2FeignRequestInterceptor</span><span class="params">(OAuth2ClientContext oauth2ClientContext)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> OAuth2FeignRequestInterceptor(oauth2ClientContext);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="核心OAuth2FeignRequestInterceptor"><a href="#核心OAuth2FeignRequestInterceptor" class="headerlink" title="核心OAuth2FeignRequestInterceptor"></a>核心OAuth2FeignRequestInterceptor</h2><p>这个类将token添加到feign请求的头里面去<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OAuth2FeignRequestInterceptor</span> <span class="keyword">implements</span> <span class="title">RequestInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String AUTHORIZATION_HEADER = <span class="string">"Authorization"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String BEARER_TOKEN_TYPE = <span class="string">"Bearer"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> OAuth2ClientContext oauth2ClientContext;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OAuth2FeignRequestInterceptor</span><span class="params">(OAuth2ClientContext oauth2ClientContext)</span> </span>&#123;</span><br><span class="line">        Assert.notNull(oauth2ClientContext, <span class="string">"Context can not be null"</span>);</span><br><span class="line">        <span class="keyword">this</span>.oauth2ClientContext = oauth2ClientContext;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">apply</span><span class="params">(RequestTemplate template)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (template.headers().containsKey(AUTHORIZATION_HEADER)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String token = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            OAuth2AccessToken oAuth2AccessToken = oauth2ClientContext.getAccessToken();</span><br><span class="line">            token = oAuth2AccessToken.getValue();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (token == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                OAuth2AccessToken oAuth2AccessToken = oauth2ClientContext.getAccessTokenRequest().getExistingToken();</span><br><span class="line">                token = oAuth2AccessToken.getValue();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(token != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//设置header</span></span><br><span class="line">            template.header(AUTHORIZATION_HEADER, String.format(<span class="string">"%s %s"</span>, BEARER_TOKEN_TYPE, token));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="EnableOAuthFeignClient"><a href="#EnableOAuthFeignClient" class="headerlink" title="@EnableOAuthFeignClient"></a>@EnableOAuthFeignClient</h2><p>可以将<code>@EnableFeignClients</code>和<code>@EnableOAuth2Client</code>合并为一个注解，方便使用<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="meta">@EnableOAuth</span>2Client</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableOAuthFeignClient &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="附录-版本"><a href="#附录-版本" class="headerlink" title="附录 版本"></a>附录 版本</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>Edgware.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-oauth2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SpringBoot项目打包的各种异常</title>
      <link href="/2018/08/11/SpringBoot%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85%E5%BC%82%E5%B8%B8/"/>
      <url>/2018/08/11/SpringBoot%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85%E5%BC%82%E5%B8%B8/</url>
      <content type="html"><![CDATA[<h2 id="修改项目jdk版本"><a href="#修改项目jdk版本" class="headerlink" title="修改项目jdk版本"></a>修改项目jdk版本</h2><p>由于maven默认的jdk版本为1.5，所以maven项目报错。<br>虽然可以手动修改idea的Target bytecode version等为1.8，但是每更新一次maven文件就要手动改一次，非常麻烦。</p><p>解决方法: 修改pom.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">compilerArgument</span>&gt;</span>-parameters<span class="tag">&lt;/<span class="name">compilerArgument</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">testCompilerArgument</span>&gt;</span>-parameters<span class="tag">&lt;/<span class="name">testCompilerArgument</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="lombok和mapstruct共存问题"><a href="#lombok和mapstruct共存问题" class="headerlink" title="lombok和mapstruct共存问题"></a>lombok和mapstruct共存问题</h2><p>由于在项目中需要同时使用lombok和mapstruct，发现本来单独使用都可以，一同时使用就会出现lombok自动生成的方法找不到的问题。</p><p>解决方法：修改pom.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">compilerArgument</span>&gt;</span>-parameters<span class="tag">&lt;/<span class="name">compilerArgument</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">testCompilerArgument</span>&gt;</span>-parameters<span class="tag">&lt;/<span class="name">testCompilerArgument</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">annotationProcessorPaths</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">path</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;lombok.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">path</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mapstruct<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mapstruct-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;org.mapstruct.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">annotationProcessorPaths</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="SpringBoot项目打成jar包后无法启动"><a href="#SpringBoot项目打成jar包后无法启动" class="headerlink" title="SpringBoot项目打成jar包后无法启动"></a>SpringBoot项目打成jar包后无法启动</h2><p>使用<code>mvn install</code>打包后，运行jar包说<code>找不到或无法加载主类</code>。</p><p>解决:<br>首先需要检查下是否配置了<code>spring-boot-maven-plugin</code>插件<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>但是我遇见了虽然配置了这个插件，但是可能是由于项目里面同时配置了<code>maven-compiler-plugin</code>（因为不配置会出现jdk版本问题，详见第一个），的原因，打包过后依然无法运行。</p><p>解决:<br>使用命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn package spring-boot:repackage</span><br></pre></td></tr></table></figure></p><p>在由于spring-boot:repackage需要依赖sources文件，所以，如果没有没有生成xxx-sources.jar需要修改pom.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-source-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>attach-sources<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goal</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> maven </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>git clone 代理配置</title>
      <link href="/2018/08/10/git-clone-%E4%BB%A3%E7%90%86%E9%85%8D%E7%BD%AE/"/>
      <url>/2018/08/10/git-clone-%E4%BB%A3%E7%90%86%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<p>设置代理<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global https.proxy 127.0.0.1:8087</span><br><span class="line">git config --global http.proxy 127.0.0.1:8087</span><br></pre></td></tr></table></figure></p><p>取消已设置的代理<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global --unset http.proxy</span><br><span class="line">git config --global --unset https.proxy</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>docker修改镜像和启动异常</title>
      <link href="/2018/08/03/docker%E4%BF%AE%E6%94%B9%E9%95%9C%E5%83%8F%E5%92%8C%E5%90%AF%E5%8A%A8%E5%BC%82%E5%B8%B8/"/>
      <url>/2018/08/03/docker%E4%BF%AE%E6%94%B9%E9%95%9C%E5%83%8F%E5%92%8C%E5%90%AF%E5%8A%A8%E5%BC%82%E5%B8%B8/</url>
      <content type="html"><![CDATA[<p>配置 sudo vim /etc/docker/daemon.json 文件<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"hosts"</span>: [</span><br><span class="line">        <span class="string">"tcp://127.0.0.1:2375"</span>,</span><br><span class="line">        <span class="string">"unix:///var/run/docker.sock"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"registry-mirrors"</span>: [<span class="string">"https://registry.docker-cn.com"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>重启服务的时候可能会报错<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Job for docker.service failed because the control process exited with error code.See "systemctl status docker.service" and "journalctl -xe" for details.</span><br></pre></td></tr></table></figure></p><p>错误原因：docker的socket配置出现了冲突，docker在运行时有一个启动入口文件：/lib/systemd/system/docker.service，而我们在修改镜像加速器的时候又给它生成了一个配置文件：/etc/docker/daemon.json，两个文件对host进行了配置，所以发生冲突。</p><p>解决方法：将docker启动入口文件中的-H fd://删除再重启服务，或者在启动入口配置监听的端口和本地socket信息：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vim /lib/systemd/system/docker.service</span><br><span class="line"></span><br><span class="line"><span class="comment">#原:ExecStart=/usr/bin/dockerd -H fd:// $DOCKER_OPTS</span></span><br><span class="line">ExecStart=/usr/bin/dockerd</span><br><span class="line"><span class="comment">#或者改成：ExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2375 -H unix:///var/run/docker.sock</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>MyBatis遗忘知识点</title>
      <link href="/2018/03/24/MyBatis%E9%81%97%E5%BF%98%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
      <url>/2018/03/24/MyBatis%E9%81%97%E5%BF%98%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
      <content type="html"><![CDATA[<blockquote><p>(MyBatis官方文档)[<a href="http://www.mybatis.org/mybatis-3/zh/]" target="_blank" rel="noopener">http://www.mybatis.org/mybatis-3/zh/]</a>  </p></blockquote><h2 id="关联的嵌套结果"><a href="#关联的嵌套结果" class="headerlink" title="关联的嵌套结果"></a>关联的嵌套结果</h2><table><thead><tr><th style="text-align:left">属性</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">resultMap</td><td style="text-align:left">这是结果映射的 ID,可以映射关联的嵌套结果到一个合适的对象图中。这 是一种替代方法来调用另外一个查询语句。这允许你联合多个表来合成到 resultMap 一个单独的结果集。这样的结果集可能包含重复,数据的重复组需要被分 解,合理映射到一个嵌套的对象图。为了使它变得容易,MyBatis 让你“链 接”结果映射,来处理嵌套结果。</td></tr><tr><td style="text-align:left">columnPrefix</td><td style="text-align:left">当连接多表时，你将不得不使用列别名来避免ResultSet中的重复列名。指定columnPrefix允许你映射列名到一个外部的结果集中。</td></tr><tr><td style="text-align:left">notNullColumn</td><td style="text-align:left">默认情况下，子对象仅在至少一个列映射到其属性非空时才创建。 通过对这个属性指定非空的列将改变默认行为，这样做之后Mybatis将仅在这些列非空时才创建一个子对象。 可以指定多个列名，使用逗号分隔。默认值：未设置(unset)。</td></tr><tr><td style="text-align:left">autoMapping</td><td style="text-align:left">如果使用了，当映射结果到当前属性时，Mybatis将启用或者禁用自动映射。 该属性覆盖全局的自动映射行为。 注意它对外部结果集无影响，所以在select or resultMap属性中这个是毫无意义的。 默认值：未设置(unset)。</td></tr></tbody></table><p>在上面你已经看到了一个非常复杂的嵌套关联的示例。 下面这个是一个非常简单的示例 来说明它如何工作。代替了执行一个分离的语句,我们联合博客表和作者表在一起:<br>Author的resultMap将定义如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"authorResult"</span> <span class="attr">type</span>=<span class="string">"Author"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"author_id"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"username"</span> <span class="attr">column</span>=<span class="string">"author_username"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"password"</span> <span class="attr">column</span>=<span class="string">"author_password"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"email"</span> <span class="attr">column</span>=<span class="string">"author_email"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"bio"</span> <span class="attr">column</span>=<span class="string">"author_bio"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>因为结果中的列名与resultMap中的列名不同。 你需要指定columnPrefix去重用映射co-author结果的resultMap。<font color="red">注意columnPrefix属性</font><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"authorResult"</span> <span class="attr">type</span>=<span class="string">"Author"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"author_id"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"username"</span> <span class="attr">column</span>=<span class="string">"author_username"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"password"</span> <span class="attr">column</span>=<span class="string">"author_password"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"email"</span> <span class="attr">column</span>=<span class="string">"author_email"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"bio"</span> <span class="attr">column</span>=<span class="string">"author_bio"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"blogResult"</span> <span class="attr">type</span>=<span class="string">"Blog"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"blog_id"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"title"</span> <span class="attr">column</span>=<span class="string">"blog_title"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"author"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">resultMap</span>=<span class="string">"authorResult"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"coAuthor"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">resultMap</span>=<span class="string">"authorResult"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">columnPrefix</span>=<span class="string">"co_"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectBlog"</span> <span class="attr">resultMap</span>=<span class="string">"blogResult"</span>&gt;</span></span><br><span class="line">  select</span><br><span class="line">    B.id            as blog_id,</span><br><span class="line">    B.title         as blog_title,</span><br><span class="line">    A.id            as author_id,</span><br><span class="line">    A.username      as author_username,</span><br><span class="line">    A.password      as author_password,</span><br><span class="line">    A.email         as author_email,</span><br><span class="line">    A.bio           as author_bio,</span><br><span class="line">    CA.id           as co_author_id,</span><br><span class="line">    CA.username     as co_author_username,</span><br><span class="line">    CA.password     as co_author_password,</span><br><span class="line">    CA.email        as co_author_email,</span><br><span class="line">    CA.bio          as co_author_bio</span><br><span class="line">  from Blog B</span><br><span class="line">  left outer join Author A on B.author_id = A.id</span><br><span class="line">  left outer join Author CA on B.co_author_id = CA.id</span><br><span class="line">  where B.id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>MySQL 5.7 中 Your password does not satisfy the current policy requirements</title>
      <link href="/2018/03/14/MySQL-5-7-%E4%B8%AD-Your-password-does-not-satisfy-the-current-policy-requirements/"/>
      <url>/2018/03/14/MySQL-5-7-%E4%B8%AD-Your-password-does-not-satisfy-the-current-policy-requirements/</url>
      <content type="html"><![CDATA[<p><a href="http://blog.csdn.net/maxsky/article/details/51171474" target="_blank" rel="noopener">http://blog.csdn.net/maxsky/article/details/51171474</a>   </p><ol><li><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> validate_password_policy=<span class="number">0</span>;</span><br></pre></td></tr></table></figure></li></ol><p>更改强度为 LOW，代表密码任意，但长度在 8 位或以上。但是，LOW 强度允许我们设置为纯数字纯字母等密码，但是我们还是不能设置 123456，因为最低要求 8 位  </p><ol start="2"><li><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> validate_password_length=<span class="number">4</span>;</span><br></pre></td></tr></table></figure><p>其实不管你设置 1、2、3、4，最低长度都是 4</p></li></ol>]]></content>
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>高性能MySQL学习（三）</title>
      <link href="/2018/03/10/%E9%AB%98%E6%80%A7%E8%83%BDMySQL%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%89%EF%BC%89/"/>
      <url>/2018/03/10/%E9%AB%98%E6%80%A7%E8%83%BDMySQL%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%89%EF%BC%89/</url>
      <content type="html"><![CDATA[<p><em>对应《高性能MySQL》第5章</em></p><h2 id="索引的类型"><a href="#索引的类型" class="headerlink" title="索引的类型"></a>索引的类型</h2><p>在存储引擎层实现，没有统一的标准</p><h3 id="B-Tree索引"><a href="#B-Tree索引" class="headerlink" title="B-Tree索引"></a>B-Tree索引</h3>]]></content>
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 高性能MySQL </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>centos 命令记录</title>
      <link href="/2018/03/03/centos-%E5%91%BD%E4%BB%A4%E8%AE%B0%E5%BD%95/"/>
      <url>/2018/03/03/centos-%E5%91%BD%E4%BB%A4%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[<h2 id="防火墙-Centos-7"><a href="#防火墙-Centos-7" class="headerlink" title="防火墙(Centos 7)"></a>防火墙(Centos 7)</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --state #查看默认防火墙状态（关闭后显示notrunning，开启后显示running）</span><br><span class="line">systemctl stop firewalld.service #停止firewall</span><br><span class="line">systemctl disable firewalld.service #禁止firewall开机启动</span><br><span class="line"></span><br><span class="line">firewall-cmd --list-ports #查看已经开放的端口</span><br><span class="line">firewall-cmd --zone=public --add-port=80/tcp --permanent #开启端口</span><br></pre></td></tr></table></figure><h2 id="压缩、解压"><a href="#压缩、解压" class="headerlink" title="压缩、解压"></a>压缩、解压</h2><h3 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar  -zcvf   压缩文件名.tar.gz   被压缩文件名</span><br></pre></td></tr></table></figure><h3 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar  -zxvf   压缩文件名.tar.gz -C 目标目录</span><br></pre></td></tr></table></figure><h2 id="软件的安装和卸载"><a href="#软件的安装和卸载" class="headerlink" title="软件的安装和卸载"></a>软件的安装和卸载</h2><p>查看已安装的PHP<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa |grep php</span><br></pre></td></tr></table></figure></p><p>查询rpm包的安装时间和详情<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -qi php-cli-5.4.16-42.el7.x86_64</span><br></pre></td></tr></table></figure></p><p>卸载<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum remove php*</span><br></pre></td></tr></table></figure></p><h2 id="MySQL的安装"><a href="#MySQL的安装" class="headerlink" title="MySQL的安装"></a>MySQL的安装</h2><p>CentOS上默认的mysql是mariadb，安装真正的mysql可以参考官网</p><blockquote><p><a href="https://dev.mysql.com/downloads/repo/yum/" target="_blank" rel="noopener">Download MySQL Yum Repository </a><br><a href="http://blog.csdn.net/holmofy/article/details/69364800" target="_blank" rel="noopener">在CentOS7上安装MySQL的辛路历程 </a>  </p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rpm -Uvh mysql57-community-release-el7-9.noarch.rpm</span><br><span class="line">yum install mysql-community-server</span><br><span class="line">service mysqld start</span><br></pre></td></tr></table></figure><h2 id="查看Linux版本"><a href="#查看Linux版本" class="headerlink" title="查看Linux版本"></a>查看Linux版本</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname -a</span><br></pre></td></tr></table></figure>]]></content>
      
      
    </entry>
    
    <entry>
      <title>高性能MySQL学习（二）</title>
      <link href="/2018/02/11/%E9%AB%98%E6%80%A7%E8%83%BDMySQL%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2018/02/11/%E9%AB%98%E6%80%A7%E8%83%BDMySQL%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      <content type="html"><![CDATA[<p><em>对应《高性能MySQL》第4章</em></p><h2 id="数据类型的选择"><a href="#数据类型的选择" class="headerlink" title="数据类型的选择"></a>数据类型的选择</h2><ul><li>更小的通常更好<br>但是要确保没有低估需要存储的值的范围</li><li>简单就好<br>使用简单的数据类型（例如，整型比字符串操作代价更低）</li><li>尽量避免NULL  </li></ul><p>可为NULL的列使得索引、索引统计和值比较都更复杂。然而，通常把NULL改成NOT NULL带来的性能提升比较小，但是，如果计划在列上建索引，就应该尽量避免设计成可为NULL</p><h2 id="整数类型"><a href="#整数类型" class="headerlink" title="整数类型"></a>整数类型</h2><p>TINYINT，SMALLINT，MEDIUMINT，INT，BIGINT<br>分别使用<br>8，16，24，32，64位存储空间<br>存储范围从 -pow(2, N-1) 到 pow(2, N-1)-1<br>整数还有 UNSIGNED 属性</p><h2 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h2><p>每个字符串列可以定义自己的字符集和排序规则（校对规则），这些会很大程度影响性能（详细在第7章讲）。下面在InnoDB或者MyISAM的情况下对比VARCHAR和CHAR</p><h3 id="VARCHAR"><a href="#VARCHAR" class="headerlink" title="VARCHAR"></a>VARCHAR</h3><p>用于存储可变长的字符串。仅存储必要的空间，越短的字符串使用的空间越少。（例外情况：如果MySQL表使用<code>ROW_RORMAT=FIXED</code>创建，每行都会使用定长存储，会浪费空间）<br>需要1或2个额外字节记录字符串长度。如果列的最大长度小于等于255字节，则需要1个字节表示，否则使用2个字节。（或许这就是Navicat VARCHAR默认是255的原因吧）</p><h3 id="CHAR"><a href="#CHAR" class="headerlink" title="CHAR"></a>CHAR</h3><p>定长。当存储CHAR值时，MySQL会删除所有末尾的空格（因为，CHAR值会根据需要采用空格进行填充以便于比较）。适合存储很短的字符串，或所有值的长度都差不多（比如密码的MD5值）。对于经常变的数据，CHAR也比VARCHAR更好。</p><h3 id="BLOB和TEXT"><a href="#BLOB和TEXT" class="headerlink" title="BLOB和TEXT"></a>BLOB和TEXT</h3><p>仅有的区别：  </p><ul><li>BLOB存储的是二进制数据，没有排序规则或字符集</li><li>TEXT有字符集和排序规则  </li></ul><p>BLOB等于SMALLBOLB，属于TINYBLOB，SMALLBLOB，MEDIUMBLOB，LONGBLOB<br>TEXT等于SMALLTEXT，属于TINYTEXT，SMALLTEXT，MEDIUMTEXT，LONGTEXT  </p><ul><li>当太大的时候，InnoDB会将数据保存于“外部”存储区，在每个值的位置只保存指针</li><li>对于它们的排序不同于其他，只对于前面的一小部分字符进行排序  </li></ul><h3 id="使用枚举类型代替字符串类型"><a href="#使用枚举类型代替字符串类型" class="headerlink" title="使用枚举类型代替字符串类型"></a>使用枚举类型代替字符串类型</h3><blockquote><p><a href="http://blog.csdn.net/woshinannan741/article/details/50519339" target="_blank" rel="noopener">MYSQL数据库中的枚举类型和集合类型</a>  </p></blockquote><p>感觉对于固定的永远都不变的分类什么的，直接使用MySQL的枚举类型比较方便（比如，性别），但实际上的应用场景也不是很多。枚举类型在处理的时候是转化成数字了的，所以，在查找时采用整数主键对于查询的速度比较快</p><h2 id="日期和时间"><a href="#日期和时间" class="headerlink" title="日期和时间"></a>日期和时间</h2><p>MySQL最小时间粒度为秒（MariaDB支持微秒），但MySQL可以使用微秒进行临时计算。</p><h3 id="DATETIME"><a href="#DATETIME" class="headerlink" title="DATETIME"></a>DATETIME</h3><p>保存大范围的时间（从1001年到9999年）。与时区无关。</p><h3 id="TIMESTAMP"><a href="#TIMESTAMP" class="headerlink" title="TIMESTAMP"></a>TIMESTAMP</h3><p>保存从1970.1.1以来的秒数（从1970年到2038年）。与时区有关。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>通常尽量使用TIMESTAMP，因为其空间效率更高。  </p><p><font color="red">mysql5.6.4以后的版本，支持带毫秒、微妙的时间数据</font>。使用<code>DATETIME(6)、TIMESTAMP(6)、CURRENT_TIMESTAMP(6)</code>既可以精确到秒后面6位了。<br>查询方法<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    <span class="keyword">DATE_FORMAT</span>( create_time, <span class="string">'%Y-%m-%d %T.%f'</span> ) <span class="keyword">AS</span> createTimeStr </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">time_stu</span><br></pre></td></tr></table></figure></p><h2 id="标识符（identifier）"><a href="#标识符（identifier）" class="headerlink" title="标识符（identifier）"></a>标识符（identifier）</h2><p>选择哪个类型作为主键</p><h3 id="整数类型-1"><a href="#整数类型-1" class="headerlink" title="整数类型"></a>整数类型</h3><p>通常是最好的选择</p><h3 id="ENUM、SET"><a href="#ENUM、SET" class="headerlink" title="ENUM、SET"></a>ENUM、SET</h3><p>不好。只适用于存储固定信息。而且内部使用整数存储，比较时转换为字符串</p><h3 id="字符串类型-1"><a href="#字符串类型-1" class="headerlink" title="字符串类型"></a>字符串类型</h3><p>避免使用字符串作为标识列。对于完全“随机”的字符串（如，MD5，SHA1，UUID产生的），这些值的取值范围过大，于是INSERT已经SELECT语句变得很慢。<br>如果存储UUID，应移除 “-” 符号。更好的做法，用UNHEX()转换为16字节数字，并存储于BINARY(16)列中。检索时通过 HEX()还原</p><h2 id="MySQL-schema-设计中的陷阱"><a href="#MySQL-schema-设计中的陷阱" class="headerlink" title="MySQL schema 设计中的陷阱"></a>MySQL schema 设计中的陷阱</h2><ul><li>太多的列</li><li>太多的关联</li><li>全能的枚举<br>防止过度使用枚举。修改枚举的值需要 ALTER TABLE操作</li><li>变相的枚举</li><li>Not Invent Here 的 NULL<br>避免使用NULL，可以使用其他值来代替NULL。但不要过于极端。（MySQL会在索引中存储NULL值，而Oracle则不会）  </li></ul><h2 id="范式与反范式"><a href="#范式与反范式" class="headerlink" title="范式与反范式"></a>范式与反范式</h2><h3 id="范式"><a href="#范式" class="headerlink" title="范式"></a>范式</h3><ul><li>范式化的更新操作通常更快</li><li>修改是只需要修改更少的数据</li><li>范式化的表通常更小</li><li>很少有多余的数据意味着检索列表数据时更少需要DISTINCT或者GROUP BY</li></ul>]]></content>
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 高性能MySQL </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>高性能MySQL学习（一）</title>
      <link href="/2018/02/09/%E9%AB%98%E6%80%A7%E8%83%BDMySQL%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2018/02/09/%E9%AB%98%E6%80%A7%E8%83%BDMySQL%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      <content type="html"><![CDATA[<h2 id="MySQL逻辑架构"><a href="#MySQL逻辑架构" class="headerlink" title="MySQL逻辑架构"></a>MySQL逻辑架构</h2><p><img src="/img/2018-2-9/1518333331.png" alt="image"></p><ol><li>最上层是大多数基于网络的客户端/服务器都有的。比如连接处理、授权、安全等。</li><li>第二层为MySQL服务器。包括SQL解析、分析、优化、缓存以及所有内置函数，所有跨存储引擎的功能的实现（存储过程、触发器、视图等）。</li><li>第三层为存储引擎。负责数据的存储和读取，例如InnoDB。存储引擎API包含几十个底层函数，用于执行“开始一个事物”、“根据主键提取一行记录”等操作。但存储引擎不会去解析SQL（InnoDB是例外，由于MySQL服务器本身没有实现外键，其会解析外键），不同存储引擎之间也不会相互通信。  </li></ol><h2 id="并发控制"><a href="#并发控制" class="headerlink" title="并发控制"></a>并发控制</h2><h3 id="读写锁"><a href="#读写锁" class="headerlink" title="读写锁"></a>读写锁</h3><ul><li>读锁，又称共享锁。相互之间不阻塞。多客户可以同时读取。</li><li>写锁，又称排他锁。一个写锁会阻塞其他写锁和读锁。  </li></ul><h3 id="锁粒度"><a href="#锁粒度" class="headerlink" title="锁粒度"></a>锁粒度</h3><p>每种MySQL存储引擎都可以实现自己的锁策略和锁粒度。</p><h4 id="表锁"><a href="#表锁" class="headerlink" title="表锁"></a>表锁</h4><p>MySQL中最基本的锁策略，开销最小。会锁住整张表。<br>在特定场景，表锁可能有良好的性能。另外，写锁有比读锁更高的优先级，因此一个写锁请求可能会被插入到读锁队列前面。<br>尽管存储引擎可以管理自己的锁，MySQL本身还是会使用各种有效的表锁实现不同的目的。例如，对于ALTER TABLE之类的使用表锁，而忽略存储引擎的锁机制。</p><h4 id="行级锁"><a href="#行级锁" class="headerlink" title="行级锁"></a>行级锁</h4><p>可以最大程度地支持并发，同时，也带来了最大的锁开销。（例如InnoDB和XtarDB）行级锁只在存储引擎实现，而MySQL服务器层没有实现。</p><h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><p>事务的ACID概念。ACID表示原子性（atomicity）、一致性（consistency）、隔离性（isolation）、持久性（durability）。</p><h4 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h4><ul><li><strong>READ UNCOMMITTED（未提交读）</strong><br>事务中的修改，即使没有提交，对其他事务也都是可见的（<font color="red">脏读</font>）。实际很少用。</li><li><strong>READ COMMITTED（提交读）</strong><br>大多数数据库默认的隔离级别（Sql Server，Oracle。但MySQL不是）。一个事务开始时，只能“看见”已经提交的事务所做的修改。也称为<font color="red">不可重复读</font>，执行两次同样的查询，结果可能不同。<br>singo拿着工资卡去消费，系统读取到卡里确实有2000元，而此时她的老婆也正好在网上转账，把singo工资卡的2000元转到另一账户，并在 singo之前提交了事务，当singo扣款时，系统检查到singo的工资卡已经没有钱，扣款失败，singo十分纳闷，明明卡里有钱，怎么没了。  </li><li><strong>REPEATABLE READ（可重复读）</strong><br><font color="red">MySQL默认隔离级别。</font>存在<font color="red">幻读</font>问题。即指，在某个事物在读取某个范围内的记录时，另外一个事务又在该范围插入了新的纪录，当之前的事务再次读取该范围的记录时，会产生换行。InnoDB和XtraDB通过多版本并发控制（MVCC）解决了此问题。<br>singo的老婆工作在银行部门，她时常通过银行内部系统查看singo的信用卡消费记录。有一天，她正在查询到singo当月信用卡的总消费金额 （select sum(amount) from transaction where month = 本月）为80元，而singo此时正好在外面胡吃海塞后在收银台买单，消费1000元，即新增了一条1000元的消费记录（insert transaction … ），并提交了事务，随后singo的老婆将singo当月信用卡消费的明细打印到A4纸上，却发现消费总额为1080元，singo的老婆很诧异，以为出 现了幻觉，幻读就这样产生了。  </li><li><strong>SERIALIZABLE（可串行化）</strong><br>最高隔离级别。强制事务串行执行。实际中很少用。  </li></ul><p><img src="/img/2018-2-9/1518333542.png" alt="image"></p><h3 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h3><p>对于死锁的解决是在存储引擎。解决死锁的方法：</p><ol><li>检测死锁的循环依赖</li><li>当查询的时间达到锁等待超时的设定后放弃锁请求，但这种方式通常不太好。InnoDB目前的处理方式是，将持有最少行级排他锁的事务进行回滚。  </li></ol><h3 id="事务日志"><a href="#事务日志" class="headerlink" title="事务日志"></a>事务日志</h3><p>可以帮助提高事务的效率。存储引擎在修改表的数据时只需要修改其内存拷贝，再把该修改行为记录到之久在硬盘的事务日志中，而不用每次都将修改数据本身持久到磁盘。日志持久之后，内存中被修改的数据在后台可以慢慢刷回到磁盘。</p><h3 id="多版本并发控制"><a href="#多版本并发控制" class="headerlink" title="多版本并发控制"></a>多版本并发控制</h3><blockquote><p><a href="http://blog.csdn.net/tb3039450/article/details/66472579" target="_blank" rel="noopener">MySQL InnoDB引擎 MVCC并发控制</a>  </p></blockquote><p>只在RC和RR隔离级别工作。因为RU总是读取最新的数据行，而SERIALIZABLE则会对所有读取的行都加锁。</p><h2 id="MySQL的存储引擎"><a href="#MySQL的存储引擎" class="headerlink" title="MySQL的存储引擎"></a>MySQL的存储引擎</h2><p><font color="red">除非万不得已，否则不要混合使用多种存储引擎</font></p><h3 id="InnoDB"><a href="#InnoDB" class="headerlink" title="InnoDB"></a>InnoDB</h3><p>MySQL默认事务型引擎。用于处理大量的短期事务（大多正常提交，很少会被回滚）。可自动崩溃恢复。InnoDB采用MVCC支持高并发，并通过 Next-key Lock（Next-key Lock = Record Lock + Gap Lock）策略防止幻读的出现。间隙锁使InnoDB不仅仅锁定查询涉及的行，还会对索引中的间隙进行锁定，以防止幻影行的插入。<br>但是MVCC是解决幻读的，Next-key Lock也是解决幻读的，两者之间的的关系还搞得不太清楚。  </p><blockquote><p><a href="http://blog.csdn.net/chen77716/article/details/6742128" target="_blank" rel="noopener">MVCC和Next-key Lock的关系</a>  </p></blockquote><h3 id="MyISAM"><a href="#MyISAM" class="headerlink" title="MyISAM"></a>MyISAM</h3><p>MySQL 5.1及其之前的默认引擎。不支持事务和行级所，崩溃后无法安全恢复。相对于InnoDB，支持全文索引，支持地理空间搜索。</p><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p><strong>日志型应用</strong><br>对于插入的速度要求很高，使用MyISAM或者Archive比较合适，它们开销低，且插入速度非常快。<br>如果要对日志进行报表分析，生成报表的SQL很可能导致插入的效率明显降低。<br>解决方法：</p><ol><li>利用MySQL内置的复制方案将数据复制到备库上，在备库上执行查询</li><li>将日志的记录按照时间分表（例如：web_logs_2012_01）。这样可以在已经没有插入操作的历史表上做频繁的查询操作。  </li></ol><h3 id="表引擎的修改"><a href="#表引擎的修改" class="headerlink" title="表引擎的修改"></a>表引擎的修改</h3><ul><li><strong>方法1：ALTER TABLE</strong>  </li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; ALTER TABLE mytable ENGINE = InnoDB</span><br></pre></td></tr></table></figure><p>存在问题：需要执行很长时间。MySQL会按行将数据从原表复制到一张新表中，会消耗大量I/O能力，同时原表上会加上读锁。因此，在繁忙表上要小心。</p><ul><li><strong>方法2：导入与导出</strong><br>手动导出原表，手动修改再导入</li><li><strong>方法3：创建与查询</strong><br>不需要导出整个表的数据，先创建一个新的存储引擎的表，在利用INSERT…SELECT完成  </li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> innodb_table <span class="keyword">LIKE</span> myisam_table;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> innodb_table <span class="keyword">ENGINE</span> = <span class="keyword">InnoDB</span>;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> innodb_table <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> myisam_table;</span><br></pre></td></tr></table></figure><p>数据量很大，可以进行分批处理，避免大事物产生过多的undo<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">START</span> <span class="keyword">TRANSACTION</span>;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> innodb_table <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> myisam_table <span class="keyword">WHERE</span> <span class="keyword">id</span> <span class="keyword">BETWEEN</span> x <span class="keyword">AND</span> y;</span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></table></figure></p><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="幻读"><a href="#幻读" class="headerlink" title="幻读"></a>幻读</h3><blockquote><p><a href="https://www.zhihu.com/question/47007926?answer_deleted_redirect=true" target="_blank" rel="noopener">关于幻读，可重复读的真实用例是什么?</a>  </p></blockquote><p>由于MySQL通过MVCC解决了幻读，所以，对于MySQL的幻读并不是对于范围数据的修改产生的。如下：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">users： id 主键</span><br><span class="line">1、T1：<span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">users</span> <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">1</span>;</span><br><span class="line">2、T2：<span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`users`</span>(<span class="string">`id`</span>, <span class="string">`name`</span>) <span class="keyword">values</span> (<span class="number">1</span>, <span class="string">'big cat'</span>);</span><br><span class="line">3、T1：<span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`users`</span>(<span class="string">`id`</span>, <span class="string">`name`</span>) <span class="keyword">values</span> (<span class="number">1</span>, <span class="string">'big cat'</span>);</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;T1 ：主事务，检测表中是否有 id 为 1 的记录，没有则插入，这是我们期望的正常业务逻辑。<br>&emsp;&emsp;T2 ：干扰事务，目的在于扰乱 T1 的正常的事务执行。<br>&emsp;&emsp;在 RR 隔离级别下，1、2 是会正常执行的，3 则会报错主键冲突，对于 T1 的业务来说是执行失败的，这里 T1 就是发生了幻读，因为T1读取的数据状态并不能支持他的下一步的业务，见鬼了一样。<br>&emsp;&emsp;在 Serializable 隔离级别下，1 执行时是会隐式的添加 gap 共享锁的，从而 2 会被阻塞，3 会正常执行，对于 T1 来说业务是正确的，成功的扼杀了扰乱业务的T2，对于T1来说他读取的状态是可以拿来支持业务的。<br>&emsp;&emsp;所以 mysql 的幻读并非什么读取两次返回结果集不同，而是事务在插入事先检测不存在的记录时，惊奇的发现这些数据已经存在了，之前的检测读获取到的数据如同鬼影一般。<br>&emsp;&emsp;这里要灵活的理解读取的意思，第一次select是读取，第二次的 insert 其实也属于隐式的读取，只不过是在 mysql 的机制中读取的，插入数据也是要先读取一下有没有主键冲突才能决定是否执行插入。<br>&emsp;&emsp;不可重复读侧重表达 读-读，幻读则是说 读-写，用写来证实读的是鬼影。  </p>]]></content>
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 高性能MySQL </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring Data Query</title>
      <link href="/2018/01/26/Spring-Data-Query/"/>
      <url>/2018/01/26/Spring-Data-Query/</url>
      <content type="html"><![CDATA[<blockquote><p><a href="https://docs.spring.io/spring-data/jpa/docs/2.0.3.RELEASE/reference/html/#repositories.query-methods.query-creation" target="_blank" rel="noopener">Spring Data JPA 2.0.3 Reference</a>  </p></blockquote><p>在看《SpringData实战》的过程中发现居然不用写sql，<strong>定义一个Repository接口，写上几个接口方法名，然后，就能使用这些接口方法了</strong>。感觉很是厉害！！就看了下SpringData的官方文档，学习了下。</p><h2 id="Query-creation"><a href="#Query-creation" class="headerlink" title="Query creation"></a>Query creation</h2><p>对于<code>List<person> findByEmailAddressAndLastname(EmailAddress emailAddress, String lastname)</person></code>Spring会把<code>find…By, read…By, query…By, count…By</code>和<code>get…By</code>这些前缀去掉，而只处理之后的字符串。例如，以下方法名，在Spring看来，就是<code>EmailAddressAndLastname</code>而已。而<code>And</code>和<code>Or</code>都被作为保留关键字，并起到SQL中<code>AND</code>和<code>OR</code>的作用。当然，你定义的<code>Person</code>对象，必须含有<code>emailAddress</code>和<code>lastname</code>属性，否则Spring找不到这些属性就会出错。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">PersonRepository</span> <span class="keyword">extends</span> <span class="title">Repository</span>&lt;<span class="title">User</span>, <span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function">List&lt;Person&gt; <span class="title">findByEmailAddressAndLastname</span><span class="params">(EmailAddress emailAddress, String lastname)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Enables the distinct flag for the query</span></span><br><span class="line">  <span class="function">List&lt;Person&gt; <span class="title">findDistinctPeopleByLastnameOrFirstname</span><span class="params">(String lastname, String firstname)</span></span>;</span><br><span class="line">  <span class="function">List&lt;Person&gt; <span class="title">findPeopleDistinctByLastnameOrFirstname</span><span class="params">(String lastname, String firstname)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Enabling ignoring case for an individual property</span></span><br><span class="line">  <span class="comment">// 无视大小写</span></span><br><span class="line">  <span class="function">List&lt;Person&gt; <span class="title">findByLastnameIgnoreCase</span><span class="params">(String lastname)</span></span>;</span><br><span class="line">  <span class="comment">// Enabling ignoring case for all suitable properties</span></span><br><span class="line">  <span class="function">List&lt;Person&gt; <span class="title">findByLastnameAndFirstnameAllIgnoreCase</span><span class="params">(String lastname, String firstname)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Enabling static ORDER BY for a query</span></span><br><span class="line">  <span class="comment">// 排序</span></span><br><span class="line">  <span class="function">List&lt;Person&gt; <span class="title">findByLastnameOrderByFirstnameAsc</span><span class="params">(String lastname)</span></span>;</span><br><span class="line">  <span class="function">List&lt;Person&gt; <span class="title">findByLastnameOrderByFirstnameDesc</span><span class="params">(String lastname)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>需要知道的几点：</p><ul><li>除了<code>AND, OR</code>之外，也支持<code>Between, LessThan, GreaterThan, Like</code>。这些运算符的实际效果取决于使用的底层数据库</li><li><code>IgnoreCase</code>用于无视特定属性的大小写，<code>AllIgnoreCase</code>用于无视所有的支持无视操作的属性（一般是String）。是否有效实际上还是取决于数据库。  </li></ul><h2 id="Property-expressions"><a href="#Property-expressions" class="headerlink" title="Property expressions"></a>Property expressions</h2><p>如果<code>Person</code>有<code>Address</code>属性，而<code>Address</code>有<code>ZipCode</code>属性，那么以下方法名仍能生成你心里想着的query。过程如下：</p><ol><li>Spring在<code>Person</code>里找<code>AddressZipCode</code>属性，没找到</li><li>Spring按驼峰从右往左分割，第一次，它分割为<code>AddressZip</code>和<code>Code</code>，但还是没找到<code>AddressZip</code>属性。</li><li>Spring将分割点左移，分割为<code>Address</code>和<code>ZipCode</code>，它在<code>Person</code>找到了<code>Address</code>属性，又在<code>Address</code>中找到了<code>ZipCode</code>属性，成功。  </li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">List&lt;Person&gt; <span class="title">findByAddressZipCode</span><span class="params">(ZipCode zipCode)</span></span>;</span><br></pre></td></tr></table></figure><p>以上仍可能出错，例如Person有<code>Address，AddressZip</code>属性，而<code>Address</code>有<code>ZipCode</code>属性，<code>AddressZip</code>没有<code>Code</code>属性，那么Spring匹配进<code>AddressZip</code>里边，结果没找到<code>Code</code>，就失败。<br>更好的方法是用下划线，下划线被Spring保留为分隔符，<code>Address_ZipCode</code>直接被分割成<code>Address</code>和<code>ZipCode</code>。既然如此，也要求我们在定义<code>Person</code>，<code>Address</code>类时，属性名不要使用下划线，而使用纯正的驼峰命名。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">List&lt;Person&gt; <span class="title">findByAddress_ZipCode</span><span class="params">(ZipCode zipCode)</span></span>;</span><br></pre></td></tr></table></figure></p><h2 id="Special-parameter-handling"><a href="#Special-parameter-handling" class="headerlink" title="Special parameter handling"></a>Special parameter handling</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Page&lt;User&gt; <span class="title">findByLastname</span><span class="params">(String lastname, Pageable pageable)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">Slice&lt;User&gt; <span class="title">findByLastname</span><span class="params">(String lastname, Pageable pageable)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">findByLastname</span><span class="params">(String lastname, Sort sort)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">findByLastname</span><span class="params">(String lastname, Pageable pageable)</span></span>;</span><br></pre></td></tr></table></figure><p>第一个函数允许传入一个<code>Pageable</code>来动态的分页查询。一个<code>Page</code>知道可用元素和页面的总数。它通过触发一个计数查询来计算总的数量。这就可以在一定程度上会占用很大的内存，这个时候就可以用<code>Slice</code>。<code>Slice</code>仅仅知道是否是否还有下一个<code>Slice</code>。从类的关系上来说，<code>Slice</code>是<code>Page</code>的子类。</p><h2 id="Limiting-query-results"><a href="#Limiting-query-results" class="headerlink" title="Limiting query results"></a>Limiting query results</h2><p>查询的结果的数量可以用<code>first</code>或者<code>top</code>来限制，这两个是等价的。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">User <span class="title">findFirstByOrderByLastnameAsc</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">User <span class="title">findTopByOrderByAgeDesc</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">Page&lt;User&gt; <span class="title">queryFirst10ByLastname</span><span class="params">(String lastname, Pageable pageable)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">Slice&lt;User&gt; <span class="title">findTop3ByLastname</span><span class="params">(String lastname, Pageable pageable)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">findFirst10ByLastname</span><span class="params">(String lastname, Sort sort)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">findTop10ByLastname</span><span class="params">(String lastname, Pageable pageable)</span></span>;</span><br></pre></td></tr></table></figure></p><p>limiting expressions同样支持<code>Distinct</code>关键词。当将结果限制到一个的时候，<code>Optional</code>是支持的。limiting query同<code>Sort</code>相结合可以进行K最小或者K最大的查询。</p><h2 id="Streaming-query-results"><a href="#Streaming-query-results" class="headerlink" title="Streaming query results"></a>Streaming query results</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Query</span>(<span class="string">"select u from User u"</span>)</span><br><span class="line"><span class="function">Stream&lt;User&gt; <span class="title">findAllByCustomQueryAndStream</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">Stream&lt;User&gt; <span class="title">readAllByFirstnameNotNull</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Query</span>(<span class="string">"select u from User u"</span>)</span><br><span class="line"><span class="function">Stream&lt;User&gt; <span class="title">streamAllPaged</span><span class="params">(Pageable pageable)</span></span>;</span><br></pre></td></tr></table></figure><p>返回结果可以是Java8的<code>Stream</code>，但要注意要关闭流，建议使用Java7的try-with-resources block<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> (Stream&lt;User&gt; stream = repository.findAllByCustomQueryAndStream()) &#123;</span><br><span class="line">  stream.forEach(…);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><font color="red">并不是所有的Spring Data modules都支持Stream的返回值</font></p><h2 id="Async-query-results"><a href="#Async-query-results" class="headerlink" title="Async query results"></a>Async query results</h2><p>可以很便捷的实现异步的操作<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Use java.util.concurrent.Future as return type.</span></span><br><span class="line"><span class="meta">@Async</span></span><br><span class="line"><span class="function">Future&lt;User&gt; <span class="title">findByFirstname</span><span class="params">(String firstname)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Use a Java 8 java.util.concurrent.CompletableFuture as return type.</span></span><br><span class="line"><span class="meta">@Async</span></span><br><span class="line"><span class="function">CompletableFuture&lt;User&gt; <span class="title">findOneByFirstname</span><span class="params">(String firstname)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Use a org.springframework.util.concurrent.ListenableFuture as return type.</span></span><br><span class="line"><span class="meta">@Async</span></span><br><span class="line"><span class="function">ListenableFuture&lt;User&gt; <span class="title">findOneByLastname</span><span class="params">(String lastname)</span></span>;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringData </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SpringBoot JPA</title>
      <link href="/2018/01/26/SpringBoot-JPA/"/>
      <url>/2018/01/26/SpringBoot-JPA/</url>
      <content type="html"><![CDATA[<h2 id="单元测试的时候，报no-session的错"><a href="#单元测试的时候，报no-session的错" class="headerlink" title="单元测试的时候，报no session的错"></a>单元测试的时候，报no session的错</h2><p>需要在单元测试类上面添加注解<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br></pre></td></tr></table></figure></p><p>也可以继承单元测试类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AbstractTransactionalJUnit4SpringContextTests</span><br></pre></td></tr></table></figure></p><h2 id="单元测试的时候，数据库会自动回滚"><a href="#单元测试的时候，数据库会自动回滚" class="headerlink" title="单元测试的时候，数据库会自动回滚"></a>单元测试的时候，数据库会自动回滚</h2><p>在使用单元测试的时候，发现对于数据库的插入、更新等操作在单元测试程序结束后会自动回滚<br>在单元测试类上面添加 @Rollback(false) 注解<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="meta">@Rollback</span>(<span class="keyword">false</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerRepositoryTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="在将hibernate查出来的类以json格式返回的时候，报lazyInit错误"><a href="#在将hibernate查出来的类以json格式返回的时候，报lazyInit错误" class="headerlink" title="在将hibernate查出来的类以json格式返回的时候，报lazyInit错误"></a>在将hibernate查出来的类以json格式返回的时候，报lazyInit错误</h2><p>对于open session in view，SpringBoot已经默认配置为开启了，不用再多余的配置了 (open-in-view: true)</p><p>可以使用配置<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  jackson:</span></span><br><span class="line"><span class="attr">    serialization:</span></span><br><span class="line"><span class="attr">      fail-on-empty-beans:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure></p><p>的方式解决，但是出来的json字符串里面会有多余的 “handler”: {}, “hibernateLazyInitializer”: {} 字段    </p><p><font color="red">更好的方法。</font>jackson官方有为hibernate提供的库，以解决懒加载的问题<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.datatype<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-datatype-hibernate5<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Module <span class="title">module</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Hibernate5Module <span class="keyword">module</span> = <span class="keyword">new</span> Hibernate5Module();</span><br><span class="line">    <span class="keyword">module</span>.disable(Hibernate5Module.Feature.USE_TRANSIENT_ANNOTATION);</span><br><span class="line">    <span class="keyword">module</span>.enable(Hibernate5Module.Feature.FORCE_LAZY_LOADING);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">module</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="lombok导致死循环"><a href="#lombok导致死循环" class="headerlink" title="lombok导致死循环"></a>lombok导致死循环</h2><p>类相互之间有相互的引用，调用lombok自动生成的 toString() 或者 hashCode() 方法会导致死循环。</p><h2 id="Entity之间有循环引用的时候，导致转换成json字符串的时候死循环（JsonView）"><a href="#Entity之间有循环引用的时候，导致转换成json字符串的时候死循环（JsonView）" class="headerlink" title="Entity之间有循环引用的时候，导致转换成json字符串的时候死循环（JsonView）"></a>Entity之间有循环引用的时候，导致转换成json字符串的时候死循环（JsonView）</h2><p>可以使用JsonView自定义要转成json的字段属性，个人觉得这是一个类似于DTO的方法<br><a href="https://spring.io/blog/2014/12/02/latest-jackson-integration-improvements-in-spring" target="_blank" rel="noopener"><font color="blue">Latest Jackson integration improvements in Spring</font></a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Summary</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SummaryWithDetail</span> <span class="keyword">extends</span> <span class="title">Summary</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="meta">@JsonView</span>(View.Summary.class)</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonView</span>(View.Summary.class)</span><br><span class="line">    <span class="keyword">private</span> String firstName;</span><br><span class="line">    <span class="meta">@JsonView</span>(View.Summary.class)</span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonView</span>(View.SummaryWithDetail.class)</span><br><span class="line">    <span class="meta">@OneToMany</span>(cascade = CascadeType.ALL, mappedBy = <span class="string">"customer"</span>)</span><br><span class="line">    <span class="keyword">private</span> Set&lt;Address&gt; addressSet;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HomeController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonView</span>(View.SummaryWithDetail.class)</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/cus"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Customer <span class="title">customer</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> customerService.get(<span class="number">4L</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="SpringBoot打印hibernate的sql语句"><a href="#SpringBoot打印hibernate的sql语句" class="headerlink" title="SpringBoot打印hibernate的sql语句"></a>SpringBoot打印hibernate的sql语句</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>SpringBoot自带，但是只能显示语句，不能显示参数<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  jpa:</span></span><br><span class="line"><span class="attr">    show-sql:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></p><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>使用log4jdbc。其可以显示底层执行的sql语句。还会显示sql执行的时间<br>pom.xml 文件<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.googlecode.log4jdbc<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>application.yml 文件<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  datasource:</span></span><br><span class="line"><span class="attr">    url:</span> <span class="attr">jdbc:log4jdbc:mysql://localhost:3306/springdata</span></span><br><span class="line"><span class="attr">    driver-class-name:</span> <span class="string">net.sf.log4jdbc.DriverSpy</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringData </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hibernate遗忘知识点记录</title>
      <link href="/2018/01/24/Hibernate%E9%81%97%E5%BF%98%E7%9F%A5%E8%AF%86%E7%82%B9%E8%AE%B0%E5%BD%95/"/>
      <url>/2018/01/24/Hibernate%E9%81%97%E5%BF%98%E7%9F%A5%E8%AF%86%E7%82%B9%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[<h2 id="怎么级联保存-更新"><a href="#怎么级联保存-更新" class="headerlink" title="怎么级联保存/更新"></a>怎么级联保存/更新</h2><p>可以设置 ‘cascade’ 属性。一般在 one-to-many 比较常见的需求，对于one-to-many在 \&lt;set> 标签中设置<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">set</span> <span class="attr">name</span>=<span class="string">"ProductModelSet"</span> <span class="attr">lazy</span>=<span class="string">"true"</span> <span class="attr">inverse</span>=<span class="string">"true"</span> <span class="attr">cascade</span>=<span class="string">"save-update"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">key</span> <span class="attr">column</span>=<span class="string">"catalog_id"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">one-to-many</span> <span class="attr">class</span>=<span class="string">"com.lk.model.ProductModel"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="boolean属性怎么配置"><a href="#boolean属性怎么配置" class="headerlink" title="boolean属性怎么配置"></a>boolean属性怎么配置</h2><p>hibernate中boolean与sql的关系如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hibernate映射类型       java类型              标准sql类型</span><br><span class="line">true_false             boolean/Boolean       char(1)</span><br><span class="line">yes_no                 boolean/Boolean       char(1)</span><br><span class="line">byte                   boolean/Boolean</span><br><span class="line">number(1)</span><br></pre></td></tr></table></figure></p><p>xml格式<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>  <span class="attr">name</span>=<span class="string">"tag"</span>   <span class="attr">column</span>=<span class="string">"tag"</span>  <span class="attr">type</span>=<span class="string">"yes_no"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>  <span class="attr">name</span>=<span class="string">"tag"</span>   <span class="attr">column</span>=<span class="string">"tag"</span>  <span class="attr">type</span>=<span class="string">"true_false"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>  <span class="attr">name</span>=<span class="string">"tag"</span>   <span class="attr">column</span>=<span class="string">"tag"</span>  <span class="attr">type</span>=<span class="string">"byte"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p><p>annotation注解<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@org</span>.hibernate.annotations.Type(type=<span class="string">"yes_no"</span>)</span><br><span class="line"><span class="comment">//或</span></span><br><span class="line"><span class="meta">@org</span>.hibernate.annotations.Type(type=<span class="string">"true_false"</span>)</span><br><span class="line"><span class="comment">//或</span></span><br><span class="line"><span class="meta">@org</span>.hibernate.annotations.Type(type=<span class="string">"byte"</span>)</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> tag;</span><br></pre></td></tr></table></figure></p><h2 id="如何插入的时候不插入为NULL的，更新的时候不更新为NULL的"><a href="#如何插入的时候不插入为NULL的，更新的时候不更新为NULL的" class="headerlink" title="如何插入的时候不插入为NULL的，更新的时候不更新为NULL的"></a>如何插入的时候不插入为NULL的，更新的时候不更新为NULL的</h2><p>设置 dynamic-update 和 dynamic-insert 属性<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"catalog"</span> <span class="attr">table</span>=<span class="string">"catalog"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">dynamic-update</span>=<span class="string">"true"</span> <span class="attr">dynamic-insert</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="Inverse和Cascade"><a href="#Inverse和Cascade" class="headerlink" title="Inverse和Cascade"></a>Inverse和Cascade</h2><p>Inverse：<font color="red">inverse的真正作用就是指定由哪一方来维护之间的关联关系。</font>负责控制关系，默认为false，也就是关系的两端都能控制，但这样会造成一些问题，更新的时候会因为两端都控制关系，于是重复更新。一般来说有一端要设为true。<br>Cascade：<font color="red">负责控制关联对象的级联操作。</font>包括更新、删除等，也就是说对一个对象进行更新、删除时，其它对象也受影响，比如我删除一个对象，那么跟它是多对一关系的对象也全部被删除。<br>举例说明区别：删除“一”那一端一个对象O的时候，如果“多”的那一端的Inverse设为true，则把“多”的那一端所有与O相关联的对象外键清空；如果“多”的那一端的Cascade设为Delete，则把“多”的那一端所有与O相关联的对象全部删除。 </p><h2 id="设置createTime和updateTime"><a href="#设置createTime和updateTime" class="headerlink" title="设置createTime和updateTime"></a>设置createTime和updateTime</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@MappedSuperclass</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeEntity</span> <span class="keyword">extends</span> <span class="title">AbstractEntity</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CreationTimestamp</span></span><br><span class="line">    <span class="meta">@Temporal</span>(TemporalType.TIMESTAMP)</span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@UpdateTimestamp</span></span><br><span class="line">    <span class="meta">@Temporal</span>(TemporalType.TIMESTAMP)</span><br><span class="line">    <span class="keyword">private</span> Date updateTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注解<code>@Temporal</code>可以设置<code>java.util.Date</code> or <code>java.util.Calendar</code>所映射的类型。</p><ul><li>TemporalType.DATE 对应MySQL中的 date</li><li>TemporalType.TIME 对应MySQL中的 time</li><li>TemporalType.TIMESTAMP 对应MySQL中的 datetime</li></ul>]]></content>
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hibernate </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>np-array</title>
      <link href="/2018/01/10/np-array/"/>
      <url>/2018/01/10/np-array/</url>
      <content type="html"><![CDATA[<h2 id="np-array"><a href="#np-array" class="headerlink" title="np.array"></a>np.array</h2><blockquote><p>array(object, dtype=None, copy=True, order=’K’, subok=False, ndmin=0)  </p></blockquote><blockquote><p>See Also：empty, empty_like, zeros, zeros_like, ones, ones_like, full, full_like</p></blockquote><h3 id="NumPy的数组中比较重要ndarray对象属性有"><a href="#NumPy的数组中比较重要ndarray对象属性有" class="headerlink" title="NumPy的数组中比较重要ndarray对象属性有"></a>NumPy的数组中比较重要ndarray对象属性有</h3><ul><li><strong>ndarray.ndim</strong><br>数组的维数（即数组轴的个数），等于秩。最常见的为二维数组（矩阵）。  </li><li><strong>ndarray.shape</strong><br>数组的维度。为一个表示数组在每个维度上大小的整数元组。例如二维数组中，表示数组的“行数”和“列数”。ndarray.shape返回一个元组，这个元组的长度就是维度的数目，即ndim属性。</li><li><strong>ndarray.size</strong><br>数组元素的总个数，等于shape属性中元组元素的乘积。</li><li><strong>ndarray.dtype</strong><br>表示数组中元素类型的对象，可使用标准的Python类型创建或指定dtype。另外也可使用前一篇文章中介绍的NumPy提供的数据类型。</li><li><strong>ndarray.itemsize</strong><br>数组中每个元素的字节大小。例如，一个元素类型为float64的数组itemsiz属性值为8(float64占用64个bits，每个字节长度为8，所以64/8，占用8个字节），又如，一个元素类型为complex32的数组item属性为4（32/8）。</li><li><strong>ndarray.data</strong><br>包含实际数组元素的缓冲区，由于一般通过数组的索引获取元素，所以通常不需要使用这个属性。  </li></ul><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><ul><li><strong>object : array_like</strong><br>An array, any object exposing the array interface（暴露array接口的object）, an object whose __array__ method returns an array（array方法返回array类型的object）, or any (nested) sequence</li><li><strong>dtype : data-type（array的数据类型）, optional</strong><br>The desired data-type for the array. 如果没有被指定，会自动确定需要的最小的数据类型</li><li><strong>copy : bool, optional</strong><br>默认为true。如果为true，则object将会被复制。操作为object的副本 </li><li><strong>order : {‘K’, ‘A’, ‘C’, ‘F’}, optional</strong><br>Specify the memory layout of the array. 默认为K  </li><li><strong>subok : bool, optional</strong><br>If True, then sub-classes will be passed-through<br>默认为false。the returned array will be forced to be a base-class array  </li><li><strong>ndmin : int, optional</strong><br>数组的最小维度  </li></ul><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p><strong>创建</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br></pre></td></tr></table></figure></p><p><strong>Upcasting</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3.0</span>])</span><br><span class="line">array([ <span class="number">1.</span>,  <span class="number">2.</span>,  <span class="number">3.</span>])</span><br></pre></td></tr></table></figure></p><p><strong>More than one dimension</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.array([[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>]])</span><br><span class="line">array([[<span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">        [<span class="number">3</span>, <span class="number">4</span>]])</span><br></pre></td></tr></table></figure></p><p><strong>Minimum dimensions 2:</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], ndmin=<span class="number">2</span>)</span><br><span class="line">array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]])</span><br></pre></td></tr></table></figure></p><p><strong>Type provided:</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], dtype=complex)</span><br><span class="line">array([ <span class="number">1.</span>+<span class="number">0.j</span>,  <span class="number">2.</span>+<span class="number">0.j</span>,  <span class="number">3.</span>+<span class="number">0.j</span>])</span><br></pre></td></tr></table></figure></p><p><strong>Data-type consisting of more than one element:</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = np.array([(<span class="number">1</span>,<span class="number">2</span>),(<span class="number">3</span>,<span class="number">4</span>)],dtype=[(<span class="string">'a'</span>,<span class="string">'&lt;i4'</span>),(<span class="string">'b'</span>,<span class="string">'&lt;i4'</span>)])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x[<span class="string">'a'</span>]</span><br><span class="line">array([<span class="number">1</span>, <span class="number">3</span>])</span><br></pre></td></tr></table></figure></p><p><strong>Creating an array from sub-classes:</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.array(np.mat(<span class="string">'1 2; 3 4'</span>))</span><br><span class="line">array([[<span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">        [<span class="number">3</span>, <span class="number">4</span>]])</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.array(np.mat(<span class="string">'1 2; 3 4'</span>), subok=<span class="keyword">True</span>)</span><br><span class="line">matrix([[<span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">        [<span class="number">3</span>, <span class="number">4</span>]])</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> ML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Tensorflow官方mnist基础例子学习</title>
      <link href="/2017/12/30/Tensorflow%E5%AE%98%E6%96%B9mnist%E5%9F%BA%E7%A1%80%E4%BE%8B%E5%AD%90%E5%AD%A6%E4%B9%A0/"/>
      <url>/2017/12/30/Tensorflow%E5%AE%98%E6%96%B9mnist%E5%9F%BA%E7%A1%80%E4%BE%8B%E5%AD%90%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<blockquote><p><a href="https://www.tensorflow.org/get_started/mnist/beginners" target="_blank" rel="noopener">官方文档</a><br><a href="http://wiki.jikexueyuan.com/project/tensorflow-zh/tutorials/mnist_beginners.html" target="_blank" rel="noopener">中文文档</a> (略微有点出入)  </p></blockquote><h2 id="tf-placeholder"><a href="#tf-placeholder" class="headerlink" title="tf.placeholder"></a>tf.placeholder</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tf.placeholder(dtype, shape=<span class="keyword">None</span>, name=<span class="keyword">None</span>)</span><br></pre></td></tr></table></figure><p>此函数可以理解为形参，用于定义过程，在执行的时候再赋具体的值<br>参数：</p><ul><li>shape<br>数据形状。默认是None，就是一维值，也可以是多维，比如<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">2</span>, <span class="number">3</span>]  <span class="comment">#表示2行3列</span></span><br><span class="line">[<span class="keyword">None</span>, <span class="number">3</span>]  <span class="comment">#表示列是3，行不定</span></span><br><span class="line">[<span class="number">10</span>]  <span class="comment">#表示1行10列</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="tf-placeholder-与-tf-Variable"><a href="#tf-placeholder-与-tf-Variable" class="headerlink" title="tf.placeholder 与 tf.Variable"></a>tf.placeholder 与 tf.Variable</h2><ul><li>tf.Variable：主要在于一些可训练变量 (trainable variables)，比如模型的权重 (weights，W)或者偏执值</li><li>tf.placeholder：用于得到传递进来的真实的训练样本。  </li></ul><h2 id="reduce-sum的reduction-indices参数"><a href="#reduce-sum的reduction-indices参数" class="headerlink" title="reduce_sum的reduction_indices参数"></a>reduce_sum的reduction_indices参数</h2><p><img src="/img/v2-42f4cebfcadac318d3de2394905c5c99_hd.jpg" alt="image"><br>[3, 3]竖起来过来显示是为了说明reduction_indices=[1, 0]的过程中维度的信息是一直保留着的，所以它并不是一个列向量，亦即它不是[ [3], [3] ]，它本质还是[ 3, 3 ]，这也是为什么你在仅仅使用reduction_indices=1的时候，打印出来的是[ 3, 3 ]的原因。  </p><h2 id="代码中y-tf-matmul-x-W-b维度不同怎么可以相加"><a href="#代码中y-tf-matmul-x-W-b维度不同怎么可以相加" class="headerlink" title="代码中y = tf.matmul(x, W) + b维度不同怎么可以相加"></a>代码中y = tf.matmul(x, W) + b维度不同怎么可以相加</h2><p>《Deep Learning》中文版第2.1节原文<br><img src="/img/v2-9f46c9c10efc8e185fda5ccd32045019_r.jpg" alt="image"><br><img src="/img/v2-c62a831754fb507a1c95fe8e6bfdcf5a_r.jpg" alt="image"><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 矩阵 None * 784</span></span><br><span class="line">x = tf.placeholder(tf.float32, [<span class="keyword">None</span>, <span class="number">784</span>])</span><br><span class="line"><span class="comment"># 矩阵 784 * 10</span></span><br><span class="line">W = tf.Variable(tf.zeros([<span class="number">784</span>, <span class="number">10</span>]))</span><br><span class="line"><span class="comment"># 矩阵 1 * 10</span></span><br><span class="line">b = tf.Variable(tf.zeros([<span class="number">10</span>]))</span><br><span class="line"><span class="comment"># x * W = None * 10的矩阵</span></span><br><span class="line"><span class="comment"># 这里 None*10 的矩阵加上 1*10 的矩阵实际上是 None*10 每一行加上b</span></span><br><span class="line"><span class="comment"># 所以最终计算出来的结果是 None*10</span></span><br><span class="line">y = tf.matmul(x, W) + b</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> ML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tensorflow </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python函数</title>
      <link href="/2017/12/30/Python%E5%87%BD%E6%95%B0/"/>
      <url>/2017/12/30/Python%E5%87%BD%E6%95%B0/</url>
      <content type="html"><![CDATA[<p><font size="4"><strong>参数定义的顺序必须是：必选参数、默认参数、可变参数、命名关键字参数、关键字参数。</strong></font></p><h2 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">power</span><span class="params">(x, n=<span class="number">2</span>)</span>:</span></span><br></pre></td></tr></table></figure><p><font color="red"><strong>默认参数必须指向不变对象！</strong></font>  </p><p><font color="red">错误示范</font><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_end</span><span class="params">(L=[])</span>:</span></span><br><span class="line">    L.append(<span class="string">'END'</span>)</span><br><span class="line">    <span class="keyword">return</span> L</span><br></pre></td></tr></table></figure></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; add_end()</span><br><span class="line">[<span class="string">'END'</span>, <span class="string">'END'</span>]</span><br><span class="line">&gt;&gt;&gt; add_end()</span><br><span class="line">[<span class="string">'END'</span>, <span class="string">'END'</span>, <span class="string">'END'</span>]</span><br></pre></td></tr></table></figure><p>正确写法<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_end</span><span class="params">(L=None)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> L <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        L = []</span><br><span class="line">    L.append(<span class="string">'END'</span>)</span><br><span class="line">    <span class="keyword">return</span> L</span><br></pre></td></tr></table></figure></p><p>原因：Python函数在定义的时候，默认参数L的值就被计算出来了，即[]，因为默认参数L也是一个变量，它指向对象[]，每次调用该函数，如果改变了L的内容，则下次调用时，默认参数的内容就变了，不再是函数定义时的[]了。</p><h2 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h2><p>可变参数允许传入0个或任意个参数，这些可变参数在函数调用时自动组装为一个tuple<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc</span><span class="params">(*numbers)</span>:</span></span><br><span class="line">    sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> numbers:</span><br><span class="line">        sum = sum + n * n</span><br><span class="line">    <span class="keyword">return</span> sum</span><br></pre></td></tr></table></figure></p><p>调用<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">calc(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="comment">#在list或tuple前面加一个*号，把list或tuple的元素变成可变参数</span></span><br><span class="line">calc(*[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br></pre></td></tr></table></figure></p><h2 id="关键字参数"><a href="#关键字参数" class="headerlink" title="关键字参数"></a>关键字参数</h2><p>关键字参数允许传入0个或任意个含参数名的参数，这些关键字参数在函数内部自动组装为一个dict<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">person</span><span class="params">(name, age, **kw)</span>:</span></span><br><span class="line">    print(<span class="string">'name:'</span>, name, <span class="string">'age:'</span>, age, <span class="string">'other:'</span>, kw)</span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>person(<span class="string">'Michael'</span>, <span class="number">30</span>)</span><br><span class="line">name: Michael age: <span class="number">30</span> other: &#123;&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>person(<span class="string">'Bob'</span>, <span class="number">35</span>, city=<span class="string">'Beijing'</span>)</span><br><span class="line">name: Bob age: <span class="number">35</span> other: &#123;<span class="string">'city'</span>: <span class="string">'Beijing'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>person(<span class="string">'Adam'</span>, <span class="number">45</span>, gender=<span class="string">'M'</span>, job=<span class="string">'Engineer'</span>)</span><br><span class="line">name: Adam age: <span class="number">45</span> other: &#123;<span class="string">'gender'</span>: <span class="string">'M'</span>, <span class="string">'job'</span>: <span class="string">'Engineer'</span>&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>extra = &#123;<span class="string">'city'</span>: <span class="string">'Beijing'</span>, <span class="string">'job'</span>: <span class="string">'Engineer'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>person(<span class="string">'Jack'</span>, <span class="number">24</span>, **extra)</span><br><span class="line">name: Jack age: <span class="number">24</span> other: &#123;<span class="string">'city'</span>: <span class="string">'Beijing'</span>, <span class="string">'job'</span>: <span class="string">'Engineer'</span>&#125;</span><br></pre></td></tr></table></figure><p>**extra表示把extra这个dict的所有key-value用关键字参数传入到函数的**kw参数，kw将获得一个dict，<font color="red">注意kw获得的dict是extra的一份拷贝，对kw的改动不会影响到函数外的extra</font>。</p><h2 id="命名关键字参数"><a href="#命名关键字参数" class="headerlink" title="命名关键字参数"></a>命名关键字参数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">person</span><span class="params">(name, age, *, city, job)</span>:</span></span><br><span class="line">    print(name, age, city, job)</span><br></pre></td></tr></table></figure><p>调用必须传入参数名<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>person(<span class="string">'Jack'</span>, <span class="number">24</span>, job=<span class="string">'Engineer'</span>, city=<span class="string">'Beijing'</span>)</span><br><span class="line">Jack <span class="number">24</span> Beijing Engineer</span><br></pre></td></tr></table></figure></p><p>如果函数定义中已经有了一个可变参数，后面跟着的命名关键字参数就不再需要一个特殊分隔符*了<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">person</span><span class="params">(name, age, *args, city, job)</span>:</span></span><br><span class="line">    print(name, age, args, city, job)</span><br></pre></td></tr></table></figure></p><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">(a, b, c=<span class="number">0</span>, *, d, **kw)</span>:</span></span><br><span class="line">    <span class="comment"># 位置参数，默认参数，命名关键字参数，关键字参数</span></span><br><span class="line">    print(<span class="string">'a ='</span>, a, <span class="string">'b ='</span>, b, <span class="string">'c ='</span>, c, <span class="string">'d ='</span>, d, <span class="string">'kw ='</span>, kw)</span><br><span class="line"></span><br><span class="line">f2(<span class="number">1</span>, <span class="number">2</span>, d=<span class="number">99</span>, ext=<span class="keyword">None</span>)</span><br><span class="line"><span class="comment"># a = 1 b = 2 c = 0 d = 99 kw = &#123;'ext': None&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python基础</title>
      <link href="/2017/12/30/Python%E5%9F%BA%E7%A1%80/"/>
      <url>/2017/12/30/Python%E5%9F%BA%E7%A1%80/</url>
      <content type="html"><![CDATA[<h2 id="基本数据结构"><a href="#基本数据结构" class="headerlink" title="基本数据结构"></a>基本数据结构</h2><h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list = [<span class="string">'Michael'</span>, <span class="string">'Bob'</span>, <span class="string">'Tracy'</span>]</span><br></pre></td></tr></table></figure><p>List的拷贝<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">b = a</span><br><span class="line">a[<span class="number">0</span>] = <span class="number">5</span></span><br><span class="line">print(b) <span class="comment"># [5, 2]</span></span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">b = a[:]</span><br><span class="line">a[<span class="number">0</span>] = <span class="number">5</span></span><br><span class="line">print(b) <span class="comment"># [1, 2]</span></span><br></pre></td></tr></table></figure><p>其实，个人觉得更好的方式是使用 copy.copy() 方法和 copy.deepcopy() 方法（经过测试 a[:] 的方式类似于浅拷贝）。<br>对于 copy.copy() 方法和 copy.deepcopy() 方法的自定义可以重写类的 __copy__ 和 __deepcopy__ 方法</p><h3 id="Tuple"><a href="#Tuple" class="headerlink" title="Tuple"></a>Tuple</h3><p>不可变<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tuple = (<span class="string">'Michael'</span>, <span class="string">'Bob'</span>, <span class="string">'Tracy'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#只有1个元素的tuple定义时必须加一个逗号,来消除歧义</span></span><br><span class="line">tuple = (<span class="string">'Michael'</span>,)</span><br></pre></td></tr></table></figure></p><h3 id="Dict"><a href="#Dict" class="headerlink" title="Dict"></a>Dict</h3><p>就是map<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;<span class="string">'Michael'</span>: <span class="number">95</span>, <span class="string">'Bob'</span>: <span class="number">75</span>, <span class="string">'Tracy'</span>: <span class="number">85</span>&#125;</span><br></pre></td></tr></table></figure></p><p>判断key存不存在<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'Thomas'</span> <span class="keyword">in</span> d</span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#或者</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.__contains__(<span class="string">'Thomas'</span>)</span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#或者</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.get(<span class="string">'Thomas'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.get(<span class="string">'Thomas'</span>, <span class="number">-1</span>)</span><br><span class="line"><span class="number">-1</span></span><br></pre></td></tr></table></figure></p><h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s = set([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
